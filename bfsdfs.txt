#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>
using namespace std;

void parallelBFS(int V, vector<int> adj[]) {
    vector<int> vis(V, 0);
    queue<int> q;
    vis[0] = 1;
    q.push(0);

    cout << "Parallel BFS Traversal: ";

    while (!q.empty()) {
        int sz = q.size();

        #pragma omp parallel for
        for (int i = 0; i < sz; ++i) {
            int node;
            #pragma omp critical
            {
                node = q.front();
                q.pop();
                cout << node << " ";
            }

            for (int nbr : adj[node]) {
                if (!vis[nbr]) {
                    #pragma omp critical
                    {
                        if (!vis[nbr]) {
                            vis[nbr] = 1;
                            q.push(nbr);
                        }
                    }
                }
            }
        }
    }
    cout << endl;
}

void parallelDFSUtil(int node, vector<int>& vis, vector<int> adj[]) {
    #pragma omp critical
    cout << node << " ";
    vis[node] = 1;

    #pragma omp parallel for
    for (int i = 0; i < adj[node].size(); ++i) {
        int nbr = adj[node][i];
        if (!vis[nbr]) {
            parallelDFSUtil(nbr, vis, adj);
        }
    }
}

void parallelDFS(int V, vector<int> adj[]) {
    vector<int> vis(V, 0);
    cout << "Parallel DFS Traversal: ";
    parallelDFSUtil(0, vis, adj);
    cout << endl;
}

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;

    vector<int> adj[V];

    cout << "Enter each edge as a pair of vertices (u v):" << endl;
    for (int i = 0; i < E; ++i) {
        int u, v;
        cin >> u >> v;
        // For undirected graph
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    parallelBFS(V, adj);
    parallelDFS(V, adj);

    return 0;
}
